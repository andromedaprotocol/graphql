# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ADORate {
  address: String!
  key: String!
}

type AddressListQuery {
  contractAddress: String!
  includesAddress(address: String!): AddressListResponse!
  isOperator(operatorAddress: String!): Boolean!
  operators: [String!]!
  owner: String!
}

type AddressListResponse {
  included: Boolean!
}

type AddressPercent {
  percent: String!
  recipient: AndrRecipient!
}

type AllNftInfo {
  access: NftOwnerInfo!
  info: NftInfo!
}

type AnchorQuery {
  contractAddress: String!
  isOperator(operatorAddress: String!): Boolean!
  operators: [String!]!
  owner: String!
}

type AndrADORecipient {
  address: AndrAddress!
  msg: String
}

type AndrAddress {
  identifier: String!
}

type AndrCW20Coin {
  address: String!
  amount: Int!
}

type AndrCoin {
  amount: String!
  denom: String!
}

input AndrCoinInput {
  amount: String!
  denom: String!
}

type AndrExpiration {
  at_height: Int
  at_time: String
}

type AndrLogo {
  data: String!
  link: String!
  mimeType: String!
}

type AndrMarketingInfo {
  description: String
  logo: AndrLogo
  marketing: String
  project: String
}

type AndrMinterResponse {
  cap: Int
  minter: String!
}

type AndrModule {
  address: AndrAddress!
  isMutable: Boolean!
  moduleType: AndrModuleType!
}

enum AndrModuleType {
  AddressList
  Offers
  Rates
  Receipt
}

enum AndrOrderBy {
  Asc
  Desc
}

type AndrRecipient {
  a_d_o: AndrADORecipient
  addr: String
}

input AndrSearchOptions {
  limit: Int = 10
  orderBy: AndrOrderBy = Asc
  startAfter: Int = 0
}

scalar Anything

type Auction {
  auctionIds(tokenAddress: String!, tokenId: String!): [Int!]!
  auctionInfo(options: AndrSearchOptions, tokenAddress: String!): AuctionInfo!
  auctionState(auctionId: Float!): AuctionAdo!
  bids(auctionId: Float!, options: AndrSearchOptions): [Bid!]!
  isOperator: Boolean!
  latestAuctionState(tokenAddress: String!, tokenId: String!): AuctionAdo!
  operators: [String!]!
  owner: String!
}

type AuctionAdo implements BaseAdo {
  adoId: String!
  adoType: String!
  auctionId: Int!
  coinDenom: String!
  contractQuery: Anything!
  endTime: AndrExpiration!
  highBidderAddr: AndrAddress!
  highBidderAmount: Int!
  isCancelled: Boolean!
  modules: [AndrModule!]
  operators: [String!]
  owner: String!
  primitiveContract: String
  startTime: AndrExpiration!
  tokenAddress: String!
  tokenId: String!
  whitelist: [AndrAddress!]
}

type AuctionInfo {
  auctionIds: [Int!]!
  tokenAddress: String!
  tokenId: String!
}

interface BaseAdo {
  adoId: String!
  adoType: String!
  contractQuery: Anything!
  modules: [AndrModule!]
  operators: [String!]
  primitiveContract: String
}

type Bid {
  amount: Int!
  bidder: String!
  timestamp: String!
}

type CW20TokenAdo implements BaseAdo {
  adoId: String!
  adoType: String!
  contractQuery: Anything!
  decimals: Int!
  initial_balances: [AndrCW20Coin!]!
  marketing: AndrMarketingInfo
  mint: AndrMinterResponse
  modules: [AndrModule!]
  name: String!
  operators: [String!]
  primitiveContract: String
  symbol: String!
}

type CodeInfo {
  code_creator: String!
  code_hash: String!
}

type Coin {
  amount: String!
  denom: String!
}

input CoinInput {
  amount: String!
  denom: String!
}

type CommissionRates {
  max_change_rate: String!
  max_rate: String!
  rate: String!
}

type ContractInfo {
  address: String!
  admin: String
  code_id: Int!
  init_msg: JSON!
  owner: String!
}

type CrowdfundConfig {
  can_mint_after_sale: Boolean!
  token_address: AndrAddress!
}

type CrowdfundQuery {
  config: CrowdfundConfig!
  contractAddress: String!
  isOperator(operatorAddress: String!): Boolean!
  operators: [String!]!
  owner: String!
  state: CrowdfundState!
}

type CrowdfundState {
  amount_sold: Int!
  amount_to_send: Int!
  amount_transferred: Int!
  expiration: AndrExpiration!
  max_amount_per_wallet: Int!
  min_tokens_sold: Int!
  price: AndrCoin!
  recipient: AndrRecipient!
}

type DepositParams {
  max_deposit_period: Int!
  min_deposit: [Coin!]!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MissionComponent {
  ado_type: String!
  instantiate_msg: String!
  name: String!
}

type MissionConfig {
  name: String!
  owner: String!
}

type MissionQuery {
  config: MissionConfig!
  contractAddress: String!
  getAddress(name: String!): String!
  getAddresses: [String!]!
  getComponents: [MissionComponent!]!
  isOperator(operatorAddress: String!): Boolean!
  operators: [String!]!
  owner: String!
}

type NftApproval {
  expires: AndrExpiration!
  spender: String!
}

type NftContractInfo {
  name: String!
  symbol: String!
}

type NftInfo {
  extension: Anything!
  tokenUri: String
}

type NftOwnerInfo {
  approvals: [NftApproval!]!
  owner: String!
}

type NftQuery {
  allNftInfo(includeExpired: Boolean!, tokenId: String!): AllNftInfo!
  allTokens(options: AndrSearchOptions): [String!]!
  approvedForAll(includeExpired: Boolean!, options: AndrSearchOptions, owner: String!): [NftApproval!]!
  contractAddress: String!
  contractInfo: NftContractInfo!
  isOperator(operatorAddress: String!): Boolean!
  minter: String!
  nftInfo(tokenId: String!): NftInfo!
  numTokens: Int!
  operators: [String!]!
  owner: String!
  ownerOf(includeExpired: Boolean!, tokenId: String!): NftOwnerInfo!
  tokens(options: AndrSearchOptions, owner: String!): [String!]!
}

type OfferResponse {
  denom: String!
  expiration: AndrExpiration!
  offerAmount: Int!
  purchaser: String!
  remainingAmount: Int!
  taxAmount: Int!
}

type OffersQuery {
  allOffers(options: AndrSearchOptions!, purchaser: String!): [OfferResponse!]!
  contractAddress: String!
  offer(tokenId: String!): OfferResponse!
}

type OracleWhitelist {
  name: String!
  tobin_tax: String!
}

type ParameterChanges {
  key: String!
  subspace: String!
  value: String!
}

type PercentRate {
  decimal: Float!
}

type PolicyConstraints {
  cap: Coin!
  change_max: String!
  rate_max: String!
  rate_min: String!
}

type PrimitiveQuery {
  contractAddress: String!
  isOperator(operatorAddress: String!): Boolean!
  operators: [String!]!
  owner: String!
}

type Query {
  addresslist(contractAddress: String!): AddressListQuery!
  anchor(contractAddress: String!): AnchorQuery!
  auction: Auction!
  crowdfund(contractAddress: String!): CrowdfundQuery!
  cw20token: CW20TokenAdo!
  mission(contractAddress: String!): MissionQuery!
  nft(contractAddress: String!): NftQuery!
  offers(contractAddress: String!): OffersQuery!
  ping: String!
  primitive(contractAddress: String!): PrimitiveQuery!
  rates(contractAddress: String!): RatesQuery!
  receipt: ReceiptAdo!
  splitter(contractAddress: String!): SplitterQuery!
  timelock: TimelockAdo!
  vault(contractAddress: String!): VaultQuery!
  wasm: Wasm!
}

type Rate {
  external: ADORate!
  flat: AndrCoin!
  percent: PercentRate!
}

type RateInfo {
  description: String!
  is_additive: Boolean!
  rate: Rate!
  receivers: [AndrRecipient!]!
}

type RatesQuery {
  contractAddress: String!
  isOperator(operatorAddress: String!): Boolean!
  operators: [String!]!
  owner: String!
  payments: [RateInfo!]!
}

type ReceiptAdo implements BaseAdo {
  adoId: String!
  adoType: String!
  contractQuery: Anything!
  minter: String!
  modules: [AndrModule!]
  operators: [String!]
  primitiveContract: String
}

type SimplePublicKey {
  key: String!
}

type Splitter {
  locked: Boolean!
  recipients: [AddressPercent!]!
}

type SplitterQuery {
  config: Splitter!
  contractAddress: String!
  isOperator(operatorAddress: String!): Boolean!
  operators: [String!]!
  owner: String!
}

type StakeAuthorizationValidators {
  addresses: [String!]!
}

type TallyParams {
  quorum: String!
  threshold: String!
  veto_threshold: String!
}

type TimelockAdo implements BaseAdo {
  adoId: String!
  adoType: String!
  contractQuery: Anything!
  modules: [AndrModule!]
  operators: [String!]
  primitiveContract: String
}

type ValConsPublicKey {
  key: String!
}

type ValidatorCommission {
  commission_rates: CommissionRates!
  update_time: String!
}

type ValidatorDescription {
  details: String!
  identity: String!
  moniker: String!
  security_contact: String!
  website: String!
}

type VaultQuery {
  contractAddress: String!
  isOperator(operatorAddress: String!): Boolean!
  operators: [String!]!
  owner: String!
}

enum VoteOption {
  Abstain
  Empty
  No
  NoWithVeto
  Yes
}

type VotingParams {
  voting_period: Int!
}

type Wasm {
  codeInfo(codeID: Int!, height: Float): CodeInfo!
  contractInfo(contractAddress: String!, height: Float!): ContractInfo!
  contractQuery(contractAddress: String!, height: Float, query: JSON!): Anything!
  parameters(height: Float): WasmParams!
}

type WasmParams {
  max_contract_gas: Int
  max_contract_msg_size: Int
  max_contract_size: Int
}

type WeightedVoteOption {
  option: VoteOption!
  weight: String!
}
